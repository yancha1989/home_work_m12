class ElecDevice {
    constructor(name, firm){
    this.name = name;
    this.firm = firm;  
    }
  
  getPower(){
    return this.name + ' фирмы ' + this.firm + ' выключен, включите его и вы узнаете потребляемую мощность!'
  }
  }
  
  class OnDevice extends ElecDevice {
    constructor(turnOn, passsportPower, name, firm){
      super(name, firm);
      this.turnOn = turnOn;
      this.passsportPower = turnOn ? passsportPower : name 
    }
  
  
  getPower(){
    if(this.turnOn) {
      return 'Потребляемая мощность ' + this.name + 'а ' + this.passsportPower * (1 / 3) + ' Ватт'
    } else {
      return super.getPower()
    }
  }
  }
  
  const hairDryer = new ElecDevice('Фен', 'Bosch')
  const kettle = new OnDevice(true, 2100,'Чайник', 'Bosch');
  console.log(kettle.getPower())

  // Здесь тоже не совсем верное решение. По заданию нужно было переписать то, что у вас сделано в предыдущем задании (общий конструктор для приборов и два дочерних конструктора для конкретных приборов) на классы, сохранив смысл и функционал. У вас здесь пропали приборы KitchenDevice и BeautyDevice, но появился OnDevice. Если имелся в виду включенный прибор, то это не подходит по смыслу, т.к. наследование предназначено для объектов, у которых есть общие свойства и общее поведение (например, у всех электроприборов есть потребляемая мощность и возможность включить\выключить из розетки), а дочерние классы расширяют функциональность объекта и добавляют что-то своё в дополнение (нагревать воду, стирать, сушить и т.д.). А включение\выключение это действие в рамках одного объекта, по сути просто изменение одного из его свойств. Поэтому включенный прибор не может быть наследником выключенного прибора.
  // Попробуйте взять код из предыдущего задания с учетом моих исправлений и переписать его на классы.